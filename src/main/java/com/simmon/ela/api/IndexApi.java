package com.simmon.ela.api;

import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;
import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;
import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;
import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;
import org.elasticsearch.action.admin.indices.get.GetIndexRequest;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentFactory;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.Date;

@RestController
@RequestMapping("/index")
public class IndexApi {

    @Autowired
    private RestHighLevelClient client;

    private static String index = "novel-spread";

    @RequestMapping(value = "", method = RequestMethod.GET)
    public String index() throws IOException {
        //create index

        CreateIndexRequest createIndexRequest = new CreateIndexRequest(index);
        createIndexRequest.settings(Settings.builder().put("index.number_of_shards", 5).put("index.number_of_replicas", 1).put("index.refresh_interval", "100ms").build());
        XContentBuilder builder = JsonXContent.contentBuilder();
        builder.startObject()
                .startObject("properties")
                .startObject("id").field("type", "long").endObject()
                .startObject("novel").field("type", "text").endObject()
                .startObject("novelId").field("type", "long").endObject()
                .startObject("chapter").field("type", "text").endObject()
                .startObject("chapterNumber").field("type", "integer").endObject()
                .startObject("func").field("type", "text").endObject()
                .startObject("publishTime").field("type", "integer").endObject()
                .endObject()
                .endObject();
        createIndexRequest.mapping("novelInfo",builder);
        GetIndexRequest getIndexRequest = new GetIndexRequest();
        getIndexRequest.indices(index);
        if (client.indices().exists(getIndexRequest, RequestOptions.DEFAULT)) {
            System.out.println("索引存在");
            return "index exists";
        }
        CreateIndexResponse createIndexResponse = client.indices().create(createIndexRequest, RequestOptions.DEFAULT);

        return "succeeded";
    }


    @RequestMapping(value = "/del", method = RequestMethod.GET)
    public String delIndex() throws IOException {
        //delete index
        GetIndexRequest getIndexRequest = new GetIndexRequest();
        getIndexRequest.indices(index);
        if (!client.indices().exists(getIndexRequest, RequestOptions.DEFAULT)) {
            return "index not exists";
        }
        DeleteIndexRequest indexRequest = new DeleteIndexRequest(index);
        DeleteIndexResponse delete = client.indices().delete(indexRequest, RequestOptions.DEFAULT);
        return "succeeded";
    }

    @RequestMapping(value = "/data",method = RequestMethod.GET)
    public String createData() throws IOException {
        XContentBuilder builder = XContentFactory.jsonBuilder();
        builder.startObject();
        builder.field("novel", "simmon");
        builder.field("novelId", 1);
        builder.field("func", "test");
        builder.field("userId", 12);
        builder.timeField("publicTime", new Date());
        builder.endObject();
        IndexRequest request = new IndexRequest(index,"novelInfo","1").source(builder);
        long autoGeneratedTimestamp = request.getAutoGeneratedTimestamp();
        IndexResponse index = client.index(request, RequestOptions.DEFAULT);

        System.out.println(index.status());
        return "succeeded";
    }
}
